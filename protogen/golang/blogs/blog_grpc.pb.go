// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: blogs/blog.proto

package blogs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlogsClient is the client API for Blogs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogsClient interface {
	AddPost(ctx context.Context, in *Blog, opts ...grpc.CallOption) (*Blog, error)
	ReadPost(ctx context.Context, in *BlogFetchRequest, opts ...grpc.CallOption) (*Blog, error)
	UpdatePost(ctx context.Context, in *BlogUpdateRequest, opts ...grpc.CallOption) (*Blog, error)
	DeletePost(ctx context.Context, in *BlogFetchRequest, opts ...grpc.CallOption) (*Result, error)
}

type blogsClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogsClient(cc grpc.ClientConnInterface) BlogsClient {
	return &blogsClient{cc}
}

func (c *blogsClient) AddPost(ctx context.Context, in *Blog, opts ...grpc.CallOption) (*Blog, error) {
	out := new(Blog)
	err := c.cc.Invoke(ctx, "/Blogs/AddPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) ReadPost(ctx context.Context, in *BlogFetchRequest, opts ...grpc.CallOption) (*Blog, error) {
	out := new(Blog)
	err := c.cc.Invoke(ctx, "/Blogs/ReadPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) UpdatePost(ctx context.Context, in *BlogUpdateRequest, opts ...grpc.CallOption) (*Blog, error) {
	out := new(Blog)
	err := c.cc.Invoke(ctx, "/Blogs/UpdatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) DeletePost(ctx context.Context, in *BlogFetchRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Blogs/DeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogsServer is the server API for Blogs service.
// All implementations must embed UnimplementedBlogsServer
// for forward compatibility
type BlogsServer interface {
	AddPost(context.Context, *Blog) (*Blog, error)
	ReadPost(context.Context, *BlogFetchRequest) (*Blog, error)
	UpdatePost(context.Context, *BlogUpdateRequest) (*Blog, error)
	DeletePost(context.Context, *BlogFetchRequest) (*Result, error)
	mustEmbedUnimplementedBlogsServer()
}

// UnimplementedBlogsServer must be embedded to have forward compatible implementations.
type UnimplementedBlogsServer struct {
}

func (UnimplementedBlogsServer) AddPost(context.Context, *Blog) (*Blog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPost not implemented")
}
func (UnimplementedBlogsServer) ReadPost(context.Context, *BlogFetchRequest) (*Blog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPost not implemented")
}
func (UnimplementedBlogsServer) UpdatePost(context.Context, *BlogUpdateRequest) (*Blog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedBlogsServer) DeletePost(context.Context, *BlogFetchRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedBlogsServer) mustEmbedUnimplementedBlogsServer() {}

// UnsafeBlogsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogsServer will
// result in compilation errors.
type UnsafeBlogsServer interface {
	mustEmbedUnimplementedBlogsServer()
}

func RegisterBlogsServer(s grpc.ServiceRegistrar, srv BlogsServer) {
	s.RegisterService(&Blogs_ServiceDesc, srv)
}

func _Blogs_AddPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).AddPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/AddPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).AddPost(ctx, req.(*Blog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_ReadPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).ReadPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/ReadPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).ReadPost(ctx, req.(*BlogFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/UpdatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).UpdatePost(ctx, req.(*BlogUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).DeletePost(ctx, req.(*BlogFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Blogs_ServiceDesc is the grpc.ServiceDesc for Blogs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Blogs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Blogs",
	HandlerType: (*BlogsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPost",
			Handler:    _Blogs_AddPost_Handler,
		},
		{
			MethodName: "ReadPost",
			Handler:    _Blogs_ReadPost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _Blogs_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _Blogs_DeletePost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blogs/blog.proto",
}
